--- a/src/apps/relay/mainrelay.c
+++ b/src/apps/relay/mainrelay.c
@@ -1084,20 +1084,17 @@
 
     int j=0,k=0;
     int totalSize=0;
-	AES_KEY key;
-	unsigned char iv[8] = {0}; //changed
-	unsigned char out[1024]; //changed
-	AES_set_encrypt_key(mykey, 128, &key);
-	char total[256];
+    unsigned char iv[8] = {0}; //changed
+    unsigned char out[1024]; //changed
+    char total[256];
     int size=0;
-    struct ctr_state state;
-    init_ctr(&state, iv);
-
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-    CRYPTO_ctr128_encrypt(in, out, strlen((char*)in), &key, state.ivec, state.ecount, &state.num, (block128_f)AES_encrypt);
-#else
-    AES_ctr128_encrypt(in, out, strlen((char*)in), &key, state.ivec, state.ecount, &state.num);
-#endif
+    int outlen = 0, tmplen = 0;
+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
+    EVP_EncryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, mykey, iv);
+    EVP_EncryptUpdate(ctx, out, &outlen, in, strlen((char *) in));
+    EVP_EncryptFinal_ex(ctx, out + outlen, &tmplen);
+    EVP_CIPHER_CTX_free(ctx);
+    out[outlen+tmplen] = '\0';
 
     totalSize += strlen((char*)in);
     size = strlen((char*)in);
@@ -1172,22 +1169,18 @@
 void decrypt_aes_128(char* in, const unsigned char* mykey){
 
     unsigned char iv[8] = {0};
-    AES_KEY key;
     unsigned char outdata[256];
-    AES_set_encrypt_key(mykey, 128, &key);
     int newTotalSize=decodedTextSize(in);
     int bytes_to_decode = strlen(in);
     unsigned char *encryptedText = base64decode(in, bytes_to_decode);
     char last[1024]="";
-    struct ctr_state state;
-    init_ctr(&state, iv);
-    memset(outdata,'\0', sizeof(outdata));
-
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-    CRYPTO_ctr128_encrypt(encryptedText,outdata,newTotalSize,&key, state.ivec, state.ecount, &state.num, (block128_f)AES_encrypt);
-#else
-    AES_ctr128_encrypt(encryptedText, outdata, newTotalSize, &key, state.ivec, state.ecount, &state.num);
-#endif
+    int outlen = 0, tmplen = 0;
+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
+    EVP_DecryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, mykey, iv);
+    EVP_DecryptUpdate(ctx, outdata, &outlen, encryptedText, newTotalSize);
+    EVP_DecryptFinal_ex(ctx, outdata + outlen, &tmplen);
+    EVP_CIPHER_CTX_free(ctx);
+    outdata[outlen+tmplen] = '\0';
 
     strcat(last,(char*)outdata);
     printf("%s\n",last);
@@ -2640,7 +2633,7 @@
 
 ////////// OpenSSL locking ////////////////////////////////////////
 
-#if defined(OPENSSL_THREADS)
+#if defined(OPENSSL_THREADS) && (OPENSSL_VERSION_NUMBER < 0x10100000L)
 
 static char some_buffer[65536];
 
@@ -2679,7 +2672,7 @@
 
 static int THREAD_setup(void) {
 
-#if defined(OPENSSL_THREADS)
+#if defined(OPENSSL_THREADS) && (OPENSSL_VERSION_NUMBER < 0x10100000L)
 
 	int i;
 
@@ -2706,7 +2699,7 @@
 int THREAD_cleanup(void);
 int THREAD_cleanup(void) {
 
-#if defined(OPENSSL_THREADS)
+#if defined(OPENSSL_THREADS) && (OPENSSL_VERSION_NUMBER < 0x10100000L)
 
   int i;
 
@@ -2785,125 +2778,57 @@
 	if(turn_params.dh_file[0])
 		adjust_key_file_name(turn_params.dh_file,"DH key",0);
 }
-static DH *get_dh566(void) {
+static EVP_PKEY *get_dh566(void) {
+	EVP_PKEY *pkey;
+	BIO *bio = BIO_new(BIO_s_mem());
+	BIO_puts(bio,
+		"-----BEGIN DH PARAMETERS-----\n"
+		"MEwCRzZTqJw88dEbLaJk3lk744wndMK+m21W59//Z2rSDOieUgAFs1P3HEGyrDgW\n"
+		"MjqOkGx+0UTL+S0eSpoygVjh4RfBnPEeli1fAgEF\n"
+		"-----END DH PARAMETERS-----");
 
+	pkey = PEM_read_bio_Parameters(bio, NULL);
 
-	unsigned char dh566_p[] = {
-					0x36,0x53,0xA8,0x9C,0x3C,0xF1,0xD1,0x1B,0x2D,0xA2,0x64,0xDE,
-					0x59,0x3B,0xE3,0x8C,0x27,0x74,0xC2,0xBE,0x9B,0x6D,0x56,0xE7,
-					0xDF,0xFF,0x67,0x6A,0xD2,0x0C,0xE8,0x9E,0x52,0x00,0x05,0xB3,
-					0x53,0xF7,0x1C,0x41,0xB2,0xAC,0x38,0x16,0x32,0x3A,0x8E,0x90,
-					0x6C,0x7E,0xD1,0x44,0xCB,0xF9,0x2D,0x1E,0x4A,0x9A,0x32,0x81,
-					0x58,0xE1,0xE1,0x17,0xC1,0x9C,0xF1,0x1E,0x96,0x2D,0x5F
-	};
-
-//	-----BEGIN DH PARAMETERS-----
-//MEwCRzZTqJw88dEbLaJk3lk744wndMK+m21W59//Z2rSDOieUgAFs1P3HEGyrDgW
-//MjqOkGx+0UTL+S0eSpoygVjh4RfBnPEeli1fAgEF
-//	-----END DH PARAMETERS-----
+	BIO_free(bio);
 
-	unsigned char dh566_g[] = { 0x05 };
-	DH *dh;
+	return pkey;
+}
 
-	if ((dh = DH_new()) == NULL )
-		return (NULL );
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
-	dh->p = BN_bin2bn(dh566_p, sizeof(dh566_p), NULL );
-	dh->g = BN_bin2bn(dh566_g, sizeof(dh566_g), NULL );
-	if ((dh->p == NULL )|| (dh->g == NULL)){ DH_free(dh); return(NULL);}
-#else
-	DH_set0_pqg(dh, BN_bin2bn(dh566_p, sizeof(dh566_p), NULL ), NULL, BN_bin2bn(dh566_g, sizeof(dh566_g), NULL ));
-#endif
-	return (dh);
-}
-
-static DH *get_dh1066(void) {
-
-	unsigned char dh1066_p[] = {
-					0x02,0x0E,0x26,0x6F,0xAA,0x9F,0xA8,0xE5,0x3F,0x70,0x88,0xF1,
-					0xA9,0x29,0xAE,0x1A,0x2B,0xA8,0x2F,0xE8,0xE5,0x0E,0x81,0x78,
-					0xD7,0x12,0x41,0xDC,0xE2,0xD5,0x10,0x6F,0x8A,0x35,0x23,0xCE,
-					0x66,0x93,0x67,0x14,0xEA,0x0A,0x61,0xD4,0x43,0x63,0x5C,0xDF,
-					0xDE,0xF5,0xB9,0xC6,0xB4,0x8C,0xBA,0x1A,0x25,0x9F,0x73,0x0F,
-					0x1E,0x1A,0x97,0x42,0x2E,0x60,0x9E,0x4C,0x3C,0x70,0x6A,0xFB,
-					0xDD,0xAA,0x7A,0x48,0xA5,0x1E,0x87,0xC8,0xA3,0x5E,0x26,0x40,
-					0x1B,0xDE,0x08,0x5E,0xA2,0xB8,0xE8,0x76,0x43,0xE8,0xF1,0x4B,
-					0x35,0x4C,0x38,0x92,0xB9,0xFF,0x61,0xE6,0x6C,0xBA,0xF9,0x16,
-					0x36,0x3C,0x69,0x2D,0x57,0x90,0x62,0x8A,0xD0,0xD4,0xFB,0xB2,
-					0x5A,0x61,0x99,0xA9,0xE8,0x93,0x80,0xA2,0xB7,0xDC,0xB1,0x6A,
-					0xAF,0xE3
-	};
-
-//	-----BEGIN DH PARAMETERS-----
-//	MIGMAoGGAg4mb6qfqOU/cIjxqSmuGiuoL+jlDoF41xJB3OLVEG+KNSPOZpNnFOoK
-//	YdRDY1zf3vW5xrSMuholn3MPHhqXQi5gnkw8cGr73ap6SKUeh8ijXiZAG94IXqK4
-//	6HZD6PFLNUw4krn/YeZsuvkWNjxpLVeQYorQ1PuyWmGZqeiTgKK33LFqr+MCAQI=
-//	-----END DH PARAMETERS-----
+static EVP_PKEY *get_dh1066(void) {
+	EVP_PKEY *pkey;
+	BIO *bio = BIO_new(BIO_s_mem());
+	BIO_puts(bio,
+		"-----BEGIN DH PARAMETERS-----\n"
+		"MIGMAoGGAg4mb6qfqOU/cIjxqSmuGiuoL+jlDoF41xJB3OLVEG+KNSPOZpNnFOoK\n"
+		"YdRDY1zf3vW5xrSMuholn3MPHhqXQi5gnkw8cGr73ap6SKUeh8ijXiZAG94IXqK4\n"
+		"6HZD6PFLNUw4krn/YeZsuvkWNjxpLVeQYorQ1PuyWmGZqeiTgKK33LFqr+MCAQI=\n"
+		"-----END DH PARAMETERS-----");
 
-	unsigned char dh1066_g[] = { 0x02 };
-	DH *dh;
+	pkey = PEM_read_bio_Parameters(bio, NULL);
 
-	if ((dh = DH_new()) == NULL )
-		return (NULL );
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
-	dh->p = BN_bin2bn(dh1066_p, sizeof(dh1066_p), NULL );
-	dh->g = BN_bin2bn(dh1066_g, sizeof(dh1066_g), NULL );
-	if ((dh->p == NULL )|| (dh->g == NULL)){ DH_free(dh); return(NULL);}
-#else
-	DH_set0_pqg(dh, BN_bin2bn(dh1066_p, sizeof(dh1066_p), NULL ), NULL, BN_bin2bn(dh1066_g, sizeof(dh1066_g), NULL ));
-#endif
-	return (dh);
-}
-
-static DH *get_dh2066(void) {
-
-	unsigned char dh2066_p[] = {
-					0x03,0x31,0x77,0x20,0x58,0xA6,0x69,0xA3,0x9D,0x2D,0x5E,0xE0,
-					0x5C,0x46,0x82,0x0F,0x9E,0x80,0xF0,0x00,0x2A,0xF9,0x0F,0x62,
-					0x1F,0x89,0xCE,0x7D,0x2A,0xFD,0xC5,0x9A,0x7C,0x6A,0x60,0x2C,
-					0xF1,0xDD,0xD4,0x4D,0x6B,0xCD,0xE9,0x95,0xDB,0x42,0x97,0xBA,
-					0xE4,0xAF,0x41,0x38,0x8F,0x57,0x31,0xA4,0x39,0xDD,0x31,0xC3,
-					0x6F,0x98,0x0E,0xE3,0xB1,0x43,0xD1,0x36,0xB0,0x01,0x28,0x42,
-					0x71,0xD3,0xB0,0x36,0xA0,0x47,0x99,0x25,0x9B,0x32,0xF5,0x86,
-					0xB1,0x13,0x5C,0x24,0x8D,0x8D,0x7F,0xE2,0x7F,0x9A,0xC1,0x52,
-					0x58,0xC0,0x63,0xAA,0x00,0x7C,0x1F,0x11,0xBD,0xAC,0x4C,0x2D,
-					0xE0,0xA2,0x9D,0x4E,0x21,0xE4,0x0B,0xCD,0x24,0x92,0xD2,0x37,
-					0x27,0x84,0x59,0x90,0x46,0x2F,0xD5,0xB9,0x27,0x93,0x18,0x88,
-					0xBD,0x91,0x5B,0x87,0x55,0x56,0xD8,0x1B,0xE4,0xCF,0x1C,0xAA,
-					0xBC,0xCF,0x80,0x1E,0x35,0x2D,0xB1,0xBC,0x35,0x31,0x92,0x62,
-					0x3C,0x91,0x8D,0x62,0xDA,0xCF,0x83,0x63,0x12,0x4B,0x30,0x80,
-					0xEE,0x82,0x3C,0x2C,0xD2,0x17,0x13,0x1F,0xF9,0x62,0x33,0x5C,
-					0x63,0xD8,0x75,0x5B,0xAA,0x16,0x5A,0x36,0x49,0x17,0x77,0xB7,
-					0x74,0xBD,0x3E,0x3F,0x98,0x20,0x59,0x5E,0xC7,0x72,0xE8,0xA3,
-					0x89,0x21,0xB4,0x3C,0x25,0xF4,0xF4,0x21,0x96,0x5A,0xA6,0x77,
-					0xFF,0x2C,0x3A,0xFC,0x98,0x5F,0xC1,0xBF,0x2A,0xCF,0xB8,0x62,
-					0x67,0x23,0xE8,0x2F,0xCC,0x7B,0x32,0x1B,0x6B,0x33,0x67,0x0A,
-					0xCB,0xD0,0x1F,0x65,0xD7,0x84,0x54,0xF6,0xF1,0x88,0xB5,0xBB,
-					0x0C,0x63,0x65,0x34,0xE4,0x66,0x4B
-	};
-
-//	-----BEGIN DH PARAMETERS-----
-//MIIBCgKCAQMDMXcgWKZpo50tXuBcRoIPnoDwACr5D2Ific59Kv3FmnxqYCzx3dRN
-//a83pldtCl7rkr0E4j1cxpDndMcNvmA7jsUPRNrABKEJx07A2oEeZJZsy9YaxE1wk
-//jY1/4n+awVJYwGOqAHwfEb2sTC3gop1OIeQLzSSS0jcnhFmQRi/VuSeTGIi9kVuH
-//VVbYG+TPHKq8z4AeNS2xvDUxkmI8kY1i2s+DYxJLMIDugjws0hcTH/liM1xj2HVb
-//qhZaNkkXd7d0vT4/mCBZXsdy6KOJIbQ8JfT0IZZapnf/LDr8mF/BvyrPuGJnI+gv
-//zHsyG2szZwrL0B9l14RU9vGItbsMY2U05GZLAgEF
-//	-----END DH PARAMETERS-----
+	BIO_free(bio);
 
-	unsigned char dh2066_g[] = { 0x05 };
-	DH *dh;
+	return pkey;
+}
 
-	if ((dh = DH_new()) == NULL )
-		return (NULL );
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
-	dh->p = BN_bin2bn(dh2066_p, sizeof(dh2066_p), NULL );
-	dh->g = BN_bin2bn(dh2066_g, sizeof(dh2066_g), NULL );
-	if ((dh->p == NULL )|| (dh->g == NULL)){ DH_free(dh); return(NULL);}
-#else
-	DH_set0_pqg(dh, BN_bin2bn(dh2066_p, sizeof(dh2066_p), NULL ), NULL, BN_bin2bn(dh2066_g, sizeof(dh2066_g), NULL ));
-#endif
-	return (dh);
+static EVP_PKEY *get_dh2066(void) {
+	EVP_PKEY *pkey;
+	BIO *bio = BIO_new(BIO_s_mem());
+	BIO_puts(bio,
+		"-----BEGIN DH PARAMETERS-----\n"
+		"MIIBCgKCAQMDMXcgWKZpo50tXuBcRoIPnoDwACr5D2Ific59Kv3FmnxqYCzx3dRN\n"
+		"a83pldtCl7rkr0E4j1cxpDndMcNvmA7jsUPRNrABKEJx07A2oEeZJZsy9YaxE1wk\n"
+		"jY1/4n+awVJYwGOqAHwfEb2sTC3gop1OIeQLzSSS0jcnhFmQRi/VuSeTGIi9kVuH\n"
+		"VVbYG+TPHKq8z4AeNS2xvDUxkmI8kY1i2s+DYxJLMIDugjws0hcTH/liM1xj2HVb\n"
+		"qhZaNkkXd7d0vT4/mCBZXsdy6KOJIbQ8JfT0IZZapnf/LDr8mF/BvyrPuGJnI+gv\n"
+		"zHsyG2szZwrL0B9l14RU9vGItbsMY2U05GZLAgEF\n"
+		"-----END DH PARAMETERS-----");
+
+	pkey = PEM_read_bio_Parameters(bio, NULL);
+
+	BIO_free(bio);
+
+	return pkey;
 }
 
 static int pem_password_func(char *buf, int size, int rwflag, void *password)
@@ -2994,12 +2919,16 @@
 	}
 
 	if (!SSL_CTX_use_PrivateKey_file(ctx, turn_params.pkey_file, SSL_FILETYPE_PEM)) {
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 		if (!SSL_CTX_use_RSAPrivateKey_file(ctx, turn_params.pkey_file, SSL_FILETYPE_PEM)) {
+#endif
 			TURN_LOG_FUNC(TURN_LOG_LEVEL_ERROR, "%s: ERROR: no valid private key found, or invalid private key password provided\n", protocol);
 			err = 1;
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 		} else {
 			print_abs_file_name(protocol, ": Private RSA key", turn_params.pkey_file);
 		}
+#endif
 	} else {
 		print_abs_file_name(protocol, ": Private key", turn_params.pkey_file);
 	}
@@ -3054,14 +2983,10 @@
 			}
 
 			{
-				EC_KEY *ecdh = EC_KEY_new_by_curve_name(nid);
-				if (!ecdh) {
+				if (SSL_CTX_set1_curves(ctx, &nid, 1) != 1) {
 					TURN_LOG_FUNC(TURN_LOG_LEVEL_ERROR,
 				      "%s: ERROR: allocate EC suite\n",__FUNCTION__);
 					set_auto_curve = 1;
-				} else {
-					SSL_CTX_set_tmp_ecdh(ctx, ecdh);
-					EC_KEY_free(ecdh);
 				}
 			}
 		}
@@ -3079,27 +3004,26 @@
 
 	{//DH algorithms:
 
-		DH *dh = NULL;
+		EVP_PKEY *dhparams = NULL;
 		if(turn_params.dh_file[0]) {
-			FILE *paramfile = fopen(turn_params.dh_file, "r");
-			 if (!paramfile) {
-				 perror("Cannot open DH file");
-			 } else {
-			   dh = PEM_read_DHparams(paramfile, NULL, NULL, NULL);
-			   fclose(paramfile);
-			   if(dh) {
-				   turn_params.dh_key_size = DH_CUSTOM;
-			   }
-			 }
+			BIO *bio = BIO_new_file(turn_params.dh_file, "r");
+			if (!bio) {
+				perror("Cannot open DH file");
+			}
+			dhparams = PEM_read_bio_Parameters(bio, NULL);
+			BIO_free(bio);
+			if(dhparams) {
+				turn_params.dh_key_size = DH_CUSTOM;
+			}
 		}
 
-		if(!dh) {
+		if(!dhparams) {
 			if(turn_params.dh_key_size == DH_566)
-				dh = get_dh566();
+				dhparams = get_dh566();
 			else if(turn_params.dh_key_size == DH_1066)
-				dh = get_dh1066();
+				dhparams = get_dh1066();
 			else
-				dh = get_dh2066();
+				dhparams = get_dh2066();
 		}
 
 		/*
@@ -3110,15 +3034,22 @@
 		}
 		*/
 
-		if(!dh) {
+		if(!dhparams) {
 			TURN_LOG_FUNC(TURN_LOG_LEVEL_ERROR, "%s: ERROR: cannot allocate DH suite\n",__FUNCTION__);
 			err = 1;
 		} else {
-			if (1 != SSL_CTX_set_tmp_dh (ctx, dh)) {
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
+			if (1 != SSL_CTX_set_tmp_dh (ctx, EVP_PKEY_get1_DH(dhparams))) {
+#else
+			if (1 != SSL_CTX_set0_tmp_dh_pkey(ctx, dhparams)) {
+				EVP_PKEY_free (dhparams);
+#endif
 				TURN_LOG_FUNC(TURN_LOG_LEVEL_ERROR, "%s: ERROR: cannot set DH\n",__FUNCTION__);
 				err = 1;
 			}
-			DH_free (dh);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
+			EVP_PKEY_free (dhparams);
+#endif
 		}
 	}
 
@@ -3207,8 +3138,10 @@
 static void openssl_setup(void)
 {
 	THREAD_setup();
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 	SSL_load_error_strings();
 	OpenSSL_add_ssl_algorithms();
+#endif
 
 #if !TLS_SUPPORTED
 	if(!turn_params.no_tls) {
@@ -3241,6 +3174,7 @@
 	pthread_mutex_lock(&turn_params.tls_mutex);
 	if(!turn_params.no_tls) {
 		set_ctx(&turn_params.tls_ctx_ssl23,"SSL23",SSLv23_server_method()); /*compatibility mode */
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 		if(!turn_params.no_tlsv1) {
 			set_ctx(&turn_params.tls_ctx_v1_0,"TLS1.0",TLSv1_server_method());
 		}
@@ -3254,6 +3188,7 @@
 		}
 #endif
 #endif
+#endif
 		TURN_LOG_FUNC(TURN_LOG_LEVEL_INFO, "TLS cipher suite: %s\n",turn_params.cipher_list);
 	}
 
@@ -3267,9 +3202,11 @@
 
 #if DTLSv1_2_SUPPORTED
 		set_ctx(&turn_params.dtls_ctx,"DTLS",DTLS_server_method());
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 		set_ctx(&turn_params.dtls_ctx_v1_2,"DTLS1.2",DTLSv1_2_server_method());
 		SSL_CTX_set_read_ahead(turn_params.dtls_ctx_v1_2, 1);
 		setup_dtls_callbacks(turn_params.dtls_ctx_v1_2);
+#endif
 #else
 		set_ctx(&turn_params.dtls_ctx,"DTLS",DTLSv1_server_method());
 #endif
--- a/src/apps/uclient/mainuclient.c
+++ b/src/apps/uclient/mainuclient.c
@@ -474,8 +474,10 @@
 
 	if(use_secure) {
 
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 		SSL_load_error_strings();
 		OpenSSL_add_ssl_algorithms();
+#endif
 
 		const char *csuite = "ALL"; //"AES256-SHA" "DH"
 		if(use_null_cipher)
@@ -488,6 +490,7 @@
 		  SSL_CTX_set_cipher_list(root_tls_ctx[root_tls_ctx_num], csuite);
 		  root_tls_ctx_num++;
 
+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)
 		  root_tls_ctx[root_tls_ctx_num] = SSL_CTX_new(TLSv1_client_method());
 		  SSL_CTX_set_cipher_list(root_tls_ctx[root_tls_ctx_num], csuite);
 		  root_tls_ctx_num++;
@@ -502,6 +505,7 @@
 		  root_tls_ctx_num++;
 #endif
 #endif
+#endif
 		} else {
 #if !DTLS_SUPPORTED
 		  fprintf(stderr,"ERROR: DTLS is not supported.\n");
@@ -510,6 +514,7 @@
 		  if(OPENSSL_VERSION_NUMBER < 0x10000000L) {
 		  	TURN_LOG_FUNC(TURN_LOG_LEVEL_WARNING, "WARNING: OpenSSL version is rather old, DTLS may not be working correctly.\n");
 		  }
+#if (OPENSSL_VERSION_NUMBER < 0x10100000L)
 		  root_tls_ctx[root_tls_ctx_num] = SSL_CTX_new(DTLSv1_client_method());
 		  SSL_CTX_set_cipher_list(root_tls_ctx[root_tls_ctx_num], csuite);
 		  root_tls_ctx_num++;
@@ -518,6 +523,11 @@
 		  SSL_CTX_set_cipher_list(root_tls_ctx[root_tls_ctx_num], csuite);
 		  root_tls_ctx_num++;
 #endif
+#else
+		  root_tls_ctx[root_tls_ctx_num] = SSL_CTX_new(DTLS_client_method());
+		  SSL_CTX_set_cipher_list(root_tls_ctx[root_tls_ctx_num], csuite);
+		  root_tls_ctx_num++;
+#endif
 #endif
 		}
 	}
--- a/src/client/ns_turn_msg.c
+++ b/src/client/ns_turn_msg.c
@@ -2530,10 +2530,10 @@
 #if OPENSSL_VERSION_NUMBER < 0x10100000L
 		EVP_CIPHER_CTX ctx;
 		EVP_CIPHER_CTX *ctxp = &ctx;
+		EVP_CIPHER_CTX_init(ctxp);
 #else
 		EVP_CIPHER_CTX *ctxp = EVP_CIPHER_CTX_new();
 #endif
-		EVP_CIPHER_CTX_init(ctxp);
 
 		/* Initialize the encryption operation. */
 		if(1 != EVP_EncryptInit_ex(ctxp, cipher, NULL, NULL, NULL))
@@ -2624,10 +2624,10 @@
 #if OPENSSL_VERSION_NUMBER < 0x10100000L
 		EVP_CIPHER_CTX ctx;
 		EVP_CIPHER_CTX *ctxp = &ctx;
+		EVP_CIPHER_CTX_init(ctxp);
 #else
 		EVP_CIPHER_CTX *ctxp = EVP_CIPHER_CTX_new();
 #endif
-		EVP_CIPHER_CTX_init(ctxp);
 		/* Initialize the decryption operation. */
 		if(1 != EVP_DecryptInit_ex(ctxp, cipher, NULL, NULL, NULL)) {
 			OAUTH_ERROR("%s: Cannot initialize decryption\n",__FUNCTION__);
